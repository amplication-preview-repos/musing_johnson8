/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BudgetCategory as PrismaBudgetCategory,
  DataRecord as PrismaDataRecord,
} from "@prisma/client";

export class BudgetCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BudgetCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.budgetCategory.count(args);
  }

  async budgetCategories(
    args: Prisma.BudgetCategoryFindManyArgs
  ): Promise<PrismaBudgetCategory[]> {
    return this.prisma.budgetCategory.findMany(args);
  }
  async budgetCategory(
    args: Prisma.BudgetCategoryFindUniqueArgs
  ): Promise<PrismaBudgetCategory | null> {
    return this.prisma.budgetCategory.findUnique(args);
  }
  async createBudgetCategory(
    args: Prisma.BudgetCategoryCreateArgs
  ): Promise<PrismaBudgetCategory> {
    return this.prisma.budgetCategory.create(args);
  }
  async updateBudgetCategory(
    args: Prisma.BudgetCategoryUpdateArgs
  ): Promise<PrismaBudgetCategory> {
    return this.prisma.budgetCategory.update(args);
  }
  async deleteBudgetCategory(
    args: Prisma.BudgetCategoryDeleteArgs
  ): Promise<PrismaBudgetCategory> {
    return this.prisma.budgetCategory.delete(args);
  }

  async findDataRecords(
    parentId: string,
    args: Prisma.DataRecordFindManyArgs
  ): Promise<PrismaDataRecord[]> {
    return this.prisma.budgetCategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dataRecords(args);
  }
}
