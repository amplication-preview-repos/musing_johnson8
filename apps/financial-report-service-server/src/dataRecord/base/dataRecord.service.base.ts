/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DataRecord as PrismaDataRecord,
  BudgetCategory as PrismaBudgetCategory,
  Account as PrismaAccount,
} from "@prisma/client";

export class DataRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataRecord.count(args);
  }

  async dataRecords(
    args: Prisma.DataRecordFindManyArgs
  ): Promise<PrismaDataRecord[]> {
    return this.prisma.dataRecord.findMany(args);
  }
  async dataRecord(
    args: Prisma.DataRecordFindUniqueArgs
  ): Promise<PrismaDataRecord | null> {
    return this.prisma.dataRecord.findUnique(args);
  }
  async createDataRecord(
    args: Prisma.DataRecordCreateArgs
  ): Promise<PrismaDataRecord> {
    return this.prisma.dataRecord.create(args);
  }
  async updateDataRecord(
    args: Prisma.DataRecordUpdateArgs
  ): Promise<PrismaDataRecord> {
    return this.prisma.dataRecord.update(args);
  }
  async deleteDataRecord(
    args: Prisma.DataRecordDeleteArgs
  ): Promise<PrismaDataRecord> {
    return this.prisma.dataRecord.delete(args);
  }

  async getBudgetCategory(
    parentId: string
  ): Promise<PrismaBudgetCategory | null> {
    return this.prisma.dataRecord
      .findUnique({
        where: { id: parentId },
      })
      .budgetCategory();
  }

  async getAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.dataRecord
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }
}
